import React, { useEffect, useState, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSupabase } from '../contexts/SupabaseContext';
import { getGeminiResponse } from '../services/geminiService';

const Dashboard = () => {
  const [founders, setFounders] = useState([]);
  const [currentFounder, setCurrentFounder] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [error, setError] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [displayFounders, setDisplayFounders] = useState([]);
  const [resources, setResources] = useState([]);
  const supabase = useSupabase();
  const navigate = useNavigate();
  const chatEndRef = useRef(null);

  useEffect(() => {
    fetchCurrentFounder();
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const fetchCurrentFounder = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      const { data, error } = await supabase
        .from('founders')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error) throw error;
      setCurrentFounder(data);
      await fetchFounders(data);
      
      setMessages([{ text: "Welcome to FounderAI! How can I assist you today?", sender: 'ai' }]);
    } catch (error) {
      console.error('Error fetching current founder:', error);
      setError('Failed to load user data');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchFounders = async (currentFounder) => {
    try {
      const { data, error } = await supabase.from('founders').select('*');
      if (error) throw error;
      setFounders(data.filter(f => f.id !== currentFounder.id));
    } catch (error) {
      console.error('Error fetching founders:', error);
      setError('Failed to load founders');
    }
  };

  const handleSend = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage = { text: input, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsAiThinking(true);

    try {
      const context = {
        currentFounder,
        allFounders: founders,
        previousMessages: messages
      };
      const aiResponse = await getGeminiResponse(input, context);
      
      setMessages(prev => [...prev, { text: aiResponse.message, sender: 'ai' }]);
      
      if (aiResponse.founders) {
        setDisplayFounders(aiResponse.founders.map(founder => ({
          ...founder,
          matchPercentage: founder.matchPercentage || null,
          compatibilityReason: founder.compatibilityReason || null
        })));
      } else {
        setDisplayFounders([]);
      }

      if (aiResponse.resources) {
        setResources(aiResponse.resources);
      } else {
        setResources([]);
      }
    } catch (error) {
      console.error('Error processing message:', error);
      setMessages(prev => [...prev, { text: "I'm sorry, I encountered an error processing your request. Please try again.", sender: 'ai' }]);
    } finally {
      setIsAiThinking(false);
    }
  };

  const handleLogout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
      setError('Failed to log out');
    }
  };

  if (isLoading) return <div className="flex justify-center items-center h-screen bg-[#202124] text-white">Loading...</div>;
  if (error) return <div className="flex justify-center items-center h-screen bg-[#202124] text-red-500">Error: {error}</div>;

  return (
    <div className="bg-[#202124] text-gray-200 min-h-screen">
      <nav className="bg-[#303134] p-4 shadow-md">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">FounderAI</h1>
          <button onClick={handleLogout} className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition duration-300">
            Sign Out
          </button>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto p-4 flex flex-col md:flex-row gap-4">
        <div className="md:w-2/3">
          <div className="bg-[#303134] rounded-lg shadow-lg p-4 mb-4">
            <div className="h-[60vh] overflow-y-auto mb-4 pr-4">
              {messages.map((message, index) => (
                <div key={index} className={`mb-4 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}>
                  <span className={`inline-block p-3 rounded-lg ${message.sender === 'user' ? 'bg-[#8ab4f8] text-black' : 'bg-[#3c4043]'}`}>
                    {message.text}
                  </span>
                </div>
              ))}
              {isAiThinking && (
                <div className="text-left">
                  <span className="inline-block p-3 rounded-lg bg-[#3c4043]">
                    Thinking...
                  </span>
                </div>
              )}
              <div ref={chatEndRef} />
            </div>
            <form onSubmit={handleSend} className="flex">
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Ask about founders, nearby founders, or startup advice..."
                className="flex-grow p-2 rounded-l-lg bg-[#3c4043] text-white focus:outline-none focus:ring-2 focus:ring-[#8ab4f8]"
              />
              <button type="submit" className="bg-[#8ab4f8] hover:bg-blue-600 text-black font-bold py-2 px-4 rounded-r-lg transition duration-300">
                Send
              </button>
            </form>
          </div>

          {resources.length > 0 && (
            <div className="bg-[#303134] rounded-lg shadow-lg p-4 mb-4">
              <h2 className="text-xl font-bold mb-2">Recommended Resources</h2>
              <ul className="list-disc pl-5">
                {resources.map((resource, index) => (
                  <li key={index} className="mb-1">
                    <a href={resource.url} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:text-blue-300">
                      {resource.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
        
        <div className="md:w-1/3">
          <div className="bg-[#303134] rounded-lg shadow-lg p-4">
            <h2 className="text-xl font-bold mb-4">Relevant Founders</h2>
            {displayFounders.length > 0 ? (
              displayFounders.map((founder) => (
                <div key={founder.id} className="bg-[#3c4043] rounded-lg p-4 mb-4 shadow transition duration-300 hover:bg-[#4c5053]">
                  <h3 className="font-bold text-lg">{founder.name}</h3>
                  <p className="text-sm mb-2">{founder.skills}</p>
                  {founder.distance && <p className="text-sm mb-2">Distance: {founder.distance.toFixed(2)} km</p>}
                  {founder.matchPercentage && <p className="text-sm mb-2">Match: {founder.matchPercentage}%</p>}
                  {founder.compatibilityReason && (
                    <p className="text-sm mb-2 italic">{founder.compatibilityReason}</p>
                  )}
                  <div className="flex justify-between mt-4">
                    <Link to={`/profile/${founder.id}`} className="bg-[#8ab4f8] hover:bg-blue-600 text-black font-bold py-2 px-4 rounded transition duration-300">
                      Profile
                    </Link>
                    <Link to={`/chat/${founder.id}`} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition duration-300">
                      Chat
                    </Link>
                  </div>
                </div>
              ))
            ) : (
              <p>No relevant founders to display at the moment.</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;