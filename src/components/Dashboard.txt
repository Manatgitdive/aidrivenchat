import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useSupabase } from '../contexts/SupabaseContext';

const Dashboard = () => {
  const [founders, setFounders] = useState([]);
  const [recommendedFounders, setRecommendedFounders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const supabase = useSupabase();

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('User not authenticated');

        // Fetch current user's profile
        const { data: currentFounder, error: currentFounderError } = await supabase
          .from('founders')
          .select('*')
          .eq('user_id', user.id)
          .single();

        if (currentFounderError) throw currentFounderError;

        // Fetch all founders
        const { data: allFounders, error: foundersError } = await supabase
          .from('founders')
          .select('*');

        if (foundersError) throw foundersError;

        // Calculate matches and set founders
        const othersWithMatch = allFounders
          .filter(f => f.id !== currentFounder.id)
          .map(founder => ({
            ...founder,
            matchPercentage: calculateMatch(currentFounder, founder)
          }));

        setFounders(othersWithMatch);

        // Set recommended founders (e.g., match > 50%)
        const recommended = othersWithMatch
          .filter(f => f.matchPercentage > 50)
          .sort((a, b) => b.matchPercentage - a.matchPercentage);

        setRecommendedFounders(recommended);

      } catch (error) {
        console.error('Error fetching data:', error);
        setError('Failed to load dashboard data');
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [supabase]);

  const calculateMatch = (currentFounder, otherFounder) => {
    const currentSkills = currentFounder.skills.toLowerCase().split(',').map(s => s.trim());
    const otherSkills = otherFounder.skills.toLowerCase().split(',').map(s => s.trim());
    const matchedSkills = currentSkills.filter(skill => otherSkills.includes(skill));
    return Math.round((matchedSkills.length / currentSkills.length) * 100);
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>
      <h1>Founders Dashboard</h1>
      
      <h2>Recommended Founders</h2>
      <ul style={{ listStyle: 'none', padding: 0 }}>
        {recommendedFounders.map((founder) => (
          <li key={founder.id} style={{ marginBottom: '10px', padding: '10px', border: '1px solid #ddd', borderRadius: '5px' }}>
            <Link to={`/profile/${founder.id}`} style={{ textDecoration: 'none', color: '#333', fontWeight: 'bold' }}>
              {founder.name}
            </Link>
            <span style={{ margin: '0 10px' }}>|</span>
            <span style={{ color: 'green' }}>{founder.matchPercentage}% Match</span>
            <span style={{ margin: '0 10px' }}>|</span>
            <Link to={`/chat/${founder.id}`} style={{ textDecoration: 'none', color: '#007bff' }}>
              Chat
            </Link>
          </li>
        ))}
      </ul>

      <h2>All Founders</h2>
      <ul style={{ listStyle: 'none', padding: 0 }}>
        {founders.map((founder) => (
          <li key={founder.id} style={{ marginBottom: '10px', padding: '10px', border: '1px solid #ddd', borderRadius: '5px' }}>
            <Link to={`/profile/${founder.id}`} style={{ textDecoration: 'none', color: '#333', fontWeight: 'bold' }}>
              {founder.name}
            </Link>
            <span style={{ margin: '0 10px' }}>|</span>
            <span>{founder.matchPercentage}% Match</span>
            <span style={{ margin: '0 10px' }}>|</span>
            <Link to={`/chat/${founder.id}`} style={{ textDecoration: 'none', color: '#007bff' }}>
              Chat
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Dashboard;



// upate dashboard new update //

import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSupabase } from '../contexts/SupabaseContext';

const Dashboard = () => {
  const [founders, setFounders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const supabase = useSupabase();
  const navigate = useNavigate();

  useEffect(() => {
    fetchFounders();
  }, []);

  const fetchFounders = async () => {
    try {
      setIsLoading(true);
      const { data, error } = await supabase.from('founders').select('*');
      if (error) throw error;
      setFounders(data);
    } catch (error) {
      console.error('Error fetching founders:', error);
      setError('Failed to load founders');
    } finally {
      setIsLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
      setError('Failed to log out');
    }
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '20px' }}>
      <h1>Founders Dashboard</h1>
      <button onClick={handleLogout} style={{ marginBottom: '20px' }}>Logout</button>
      <ul style={{ listStyle: 'none', padding: 0 }}>
        {founders.map((founder) => (
          <li key={founder.id} style={{ marginBottom: '10px', padding: '10px', border: '1px solid #ddd', borderRadius: '5px' }}>
            <Link to={`/profile/${founder.id}`} style={{ textDecoration: 'none', color: '#333', fontWeight: 'bold' }}>
              {founder.name}
            </Link>
            <span style={{ margin: '0 10px' }}>|</span>
            <Link to={`/chat/${founder.id}`} style={{ textDecoration: 'none', color: '#007bff' }}>
              Chat
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Dashboard;