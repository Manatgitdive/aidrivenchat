import React, { useEffect, useState, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSupabase } from '../contexts/SupabaseContext';
import { getGeminiResponse } from '../services/geminiService';

const Dashboard = () => {
  const [founders, setFounders] = useState([]);
  const [currentFounder, setCurrentFounder] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [error, setError] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [displayFounders, setDisplayFounders] = useState([]);
  const supabase = useSupabase();
  const navigate = useNavigate();
  const chatEndRef = useRef(null);
  const inputRef = useRef(null);

  useEffect(() => {
    fetchCurrentFounder();
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const fetchCurrentFounder = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      const { data, error } = await supabase
        .from('founders')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error) throw error;
      setCurrentFounder(data);
      await fetchFounders(data);
      
      setMessages([{ text: `Hello, ${data.name}! How can I help you today?`, sender: 'ai' }]);
    } catch (error) {
      console.error('Error fetching current founder:', error);
      setError('Failed to load user data');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchFounders = async (currentFounder) => {
    try {
      const { data, error } = await supabase.from('founders').select('*');
      if (error) throw error;
      setFounders(data.filter(f => f.id !== currentFounder.id));
    } catch (error) {
      console.error('Error fetching founders:', error);
      setError('Failed to load founders');
    }
  };

  const handleSend = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;
    const userMessage = { text: input, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsAiThinking(true);
    try {
      const context = {
        currentFounder,
        allFounders: founders,
        previousMessages: messages
      };
      const aiResponse = await getGeminiResponse(input, context);
      
      setMessages(prev => [...prev, { text: aiResponse.message, sender: 'ai' }]);
      
      if (aiResponse.founders && aiResponse.founders.length > 0) {
        setDisplayFounders(aiResponse.founders);
      } else {
        setDisplayFounders([]);
      }
    } catch (error) {
      console.error('Error processing message:', error);
      setMessages(prev => [...prev, { text: "I'm sorry, I encountered an error processing your request.", sender: 'ai' }]);
    } finally {
      setIsAiThinking(false);
    }
  };

  const handleLogout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
      setError('Failed to log out');
    }
  };

  if (isLoading) return <div className="flex justify-center items-center h-screen bg-white text-gray-800">Loading...</div>;
  if (error) return <div className="flex justify-center items-center h-screen bg-white text-red-500">Error: {error}</div>;

  const suggestions = [
    "Recommend founders for networking",
    "Give me tips for pitching to investors",
    "Ideas to improve my startup's growth",
    "Show me all founders in my area"
  ];

  return (
    <div className="bg-white text-gray-800 min-h-screen flex flex-col">
      {/* Navigation */}
      <nav className="bg-white border-b p-4">
        <div className="max-w-5xl mx-auto flex justify-between items-center">
          <div className="flex items-center">
            <h1 className="text-xl font-semibold text-blue-600 mr-4">FounderAI</h1>
            <button className="text-gray-600 hover:bg-gray-100 px-3 py-1 rounded">Try FounderAI Advanced</button>
          </div>
          <button onClick={handleLogout} className="text-gray-600 hover:text-gray-800">Sign Out</button>
        </div>
      </nav>

      {/* Main content */}
      <main className="flex-grow flex flex-col max-w-3xl mx-auto w-full p-4 sm:p-6 md:p-8">
        {messages.length === 1 ? (
          <>
            <h2 className="text-4xl font-bold mb-2">
              <span className="text-blue-600">Hello,</span> <span className="text-purple-600">{currentFounder?.name}</span>
            </h2>
            <h3 className="text-2xl text-gray-600 mb-8">How can I help you today?</h3>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
              {suggestions.map((suggestion, index) => (
                <button
                  key={index}
                  className="bg-gray-100 hover:bg-gray-200 text-gray-800 py-4 px-6 rounded-xl text-left transition duration-300 flex items-start"
                  onClick={() => {
                    setInput(suggestion);
                    inputRef.current.focus();
                  }}
                >
                  <span className="mr-3">ðŸš€</span>
                  {suggestion}
                </button>
              ))}
            </div>
          </>
        ) : (
          <div className="mb-8 flex-grow overflow-y-auto">
            {messages.map((message, index) => (
              <div key={index} className={`mb-4 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}>
                <span className={`inline-block p-3 rounded-lg ${message.sender === 'user' ? 'bg-blue-100' : 'bg-gray-100'}`}>
                  {message.text}
                </span>
              </div>
            ))}
            {isAiThinking && (
              <div className="text-left">
                <span className="inline-block p-3 rounded-lg bg-gray-100">
                Thinking...
                </span>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>
        )}

        <form onSubmit={handleSend} className="mt-auto">
          <div className="relative">
            <input
              ref={inputRef}
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Enter a prompt here"
              className="w-full p-4 pr-12 rounded-2xl bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-800"
            />
            <button 
              type="submit" 
              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
              disabled={!input.trim()}
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </form>

        {messages.length > 1 && (
          <p className="text-sm text-gray-500 mt-4">
            FounderAI may display inaccurate info, including about people, so double-check its responses.
          </p>
        )}

        {displayFounders.length > 0 && (
          <div className="mt-8">
            <h2 className="text-2xl font-bold mb-4">Relevant Founders</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {displayFounders.map((founder) => (
                <div key={founder.id} className="bg-white rounded-lg p-4 shadow-md transition duration-300 hover:shadow-lg border border-gray-200">
                  <h3 className="font-bold text-lg">{founder.name}</h3>
                  <p className="text-sm mb-2">{founder.skills}</p>
                  {founder.distance && <p className="text-sm mb-2">Distance: {founder.distance.toFixed(2)} km</p>}
                  {founder.matchReason && <p className="text-sm mb-2">{founder.matchReason}</p>}
                  <div className="flex justify-between mt-4">
                    <Link to={`/profile/${founder.id}`} className="text-blue-600 hover:text-blue-800 font-semibold">
                      View Profile
                    </Link>
                    <Link to={`/chat/${founder.id}`} className="text-green-600 hover:text-green-800 font-semibold">
                      Start Chat
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Dashboard;


// beta version code //

import React, { useEffect, useState, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSupabase } from '../contexts/SupabaseContext';
import { getGeminiResponse } from '../services/geminiService';

const Dashboard = () => {
  const [founders, setFounders] = useState([]);
  const [currentFounder, setCurrentFounder] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [error, setError] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [displayFounders, setDisplayFounders] = useState([]);
  const supabase = useSupabase();
  const navigate = useNavigate();
  const chatEndRef = useRef(null);
  const inputRef = useRef(null);

  useEffect(() => {
    fetchCurrentFounder();
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const fetchCurrentFounder = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      const { data, error } = await supabase
        .from('founders')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error) throw error;
      setCurrentFounder(data);
      await fetchFounders(data);
      
      setMessages([{ text: `Hello, ${data.name}! How can I help you today?`, sender: 'ai' }]);
    } catch (error) {
      console.error('Error fetching current founder:', error);
      setError('Failed to load user data');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchFounders = async (currentFounder) => {
    try {
      const { data, error } = await supabase.from('founders').select('*');
      if (error) throw error;
      setFounders(data.filter(f => f.id !== currentFounder.id));
    } catch (error) {
      console.error('Error fetching founders:', error);
      setError('Failed to load founders');
    }
  };

  const handleSend = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;
    const userMessage = { text: input, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsAiThinking(true);
    try {
      const context = {
        currentFounder,
        allFounders: founders,
        previousMessages: messages
      };
      const aiResponse = await getGeminiResponse(input, context);
      
      setMessages(prev => [...prev, { text: aiResponse.message, sender: 'ai' }]);
      
      if (aiResponse.founders && aiResponse.founders.length > 0) {
        setDisplayFounders(aiResponse.founders);
      } else {
        setDisplayFounders([]);
      }
    } catch (error) {
      console.error('Error processing message:', error);
      setMessages(prev => [...prev, { text: "I'm sorry, I encountered an error processing your request.", sender: 'ai' }]);
    } finally {
      setIsAiThinking(false);
    }
  };

  const handleLogout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
      setError('Failed to log out');
    }
  };

  if (isLoading) return <div className="flex justify-center items-center h-screen bg-white text-gray-800">Loading...</div>;
  if (error) return <div className="flex justify-center items-center h-screen bg-white text-red-500">Error: {error}</div>;

  const suggestions = [
    "Recommend founders for networking",
    "Give me tips for pitching to investors",
    "Ideas to improve my startup's growth",
    "Show me all founders in my area"
  ];

  return (
    <div className="bg-white text-gray-800 min-h-screen flex flex-col w-screen h-screen">
      {/* Navigation */}
      <nav className="bg-white border-b p-4">
        <div className="max-w-5xl mx-auto flex justify-between items-center">
          <div className="flex items-center">
            <h1 className="text-xl font-semibold text-blue-600 mr-4">FounderAI</h1>
            <button className="text-gray-600 hover:bg-gray-100 px-3 py-1 rounded">Try FounderAI Advanced</button>
          </div>
          <button onClick={handleLogout} className="text-gray-600 hover:text-gray-800">Sign Out</button>
        </div>
      </nav>

      {/* Main content */}
      <main className="flex-grow flex flex-col max-w-3xl mx-auto w-full p-4 sm:p-6 md:p-8">
        {messages.length === 1 ? (
          <>
            <h2 className="text-4xl font-bold mb-2">
              <span className="text-blue-600">Hello,</span> <span className="text-purple-600">{currentFounder?.name}</span>
            </h2>
            <h3 className="text-2xl text-gray-600 mb-8">How can I help you today?</h3>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
              {suggestions.map((suggestion, index) => (
                <button
                  key={index}
                  className="bg-gray-100 hover:bg-gray-200 text-gray-800 py-4 px-6 rounded-xl text-left transition duration-300 flex items-start"
                  onClick={() => {
                    setInput(suggestion);
                    inputRef.current.focus();
                  }}
                >
                  <span className="mr-3">ðŸš€</span>
                  {suggestion}
                </button>
              ))}
            </div>
          </>
        ) : (
          <div className="mb-8 flex-grow overflow-y-auto">
            {messages.map((message, index) => (
              <div key={index} className={`mb-4 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}>
                <span className={`inline-block p-3 rounded-lg ${message.sender === 'user' ? 'bg-blue-100' : 'bg-gray-100'}`}>
                  {message.text}
                </span>
              </div>
            ))}
            {isAiThinking && (
              <div className="text-left">
                <span className="inline-block p-3 rounded-lg bg-gray-100">
                Thinking...
                </span>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>
        )}

        <form onSubmit={handleSend} className="mt-auto">
          <div className="relative">
            <input
              ref={inputRef}
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Enter a prompt here"
              className="w-full p-4 pr-12 rounded-2xl bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-800"
            />
            <button 
              type="submit" 
              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
              disabled={!input.trim()}
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </form>

        {messages.length > 1 && (
          <p className="text-sm text-gray-500 mt-4">
            FounderAI may display inaccurate info, including about people, so double-check its responses.
          </p>
        )}

        {displayFounders.length > 0 && (
          <div className="mt-8">
            <h2 className="text-2xl font-bold mb-4">Relevant Founders</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {displayFounders.map((founder) => (
                <div key={founder.id} className="bg-white rounded-lg p-4 shadow-md transition duration-300 hover:shadow-lg border border-gray-200">
                  <h3 className="font-bold text-lg">{founder.name}</h3>
                  <p className="text-sm mb-2">{founder.skills}</p>
                  {founder.distance && <p className="text-sm mb-2">Distance: {founder.distance.toFixed(2)} km</p>}
                  {founder.matchReason && <p className="text-sm mb-2">{founder.matchReason}</p>}
                  <div className="flex justify-between mt-4">
                    <Link to={`/profile/${founder.id}`} className="text-blue-600 hover:text-blue-800 font-semibold">
                      View Profile
                    </Link>
                    <Link to={`/chat/${founder.id}`} className="text-green-600 hover:text-green-800 font-semibold">
                      Start Chat
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Dashboard;