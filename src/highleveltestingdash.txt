import React, { useEffect, useState, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSupabase } from '../contexts/SupabaseContext';
import { getGeminiResponse } from '../services/geminiService';
import { format } from 'date-fns';
import { Send, MessageCircle, User, LogOut } from 'lucide-react';

const Dashboard = () => {
  const [founders, setFounders] = useState([]);
  const [currentFounder, setCurrentFounder] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [error, setError] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [displayFounders, setDisplayFounders] = useState([]);
  const [recentChats, setRecentChats] = useState([]);
  const supabase = useSupabase();
  const navigate = useNavigate();
  const chatEndRef = useRef(null);
  const inputRef = useRef(null);

  useEffect(() => {
    fetchCurrentFounder();
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const fetchCurrentFounder = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      const { data, error } = await supabase
        .from('founders')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error) throw error;
      setCurrentFounder(data);
      await fetchFounders(data);
      await fetchRecentChats(data.id);
      
      setMessages([{ text: `Hello, ${data.name}! How can I help you today?`, sender: 'ai' }]);
    } catch (error) {
      console.error('Error fetching current founder:', error);
      setError('Failed to load user data');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchFounders = async (currentFounder) => {
    try {
      const { data, error } = await supabase.from('founders').select('*');
      if (error) throw error;
      setFounders(data.filter(f => f.id !== currentFounder.id));
    } catch (error) {
      console.error('Error fetching founders:', error);
      setError('Failed to load founders');
    }
  };

  const fetchRecentChats = async (founderId) => {
    try {
      const { data, error } = await supabase
        .from('messages')
        .select(`
          id,
          sender_id,
          receiver_id,
          content,
          created_at,
          founders!receiver_id(name)
        `)
        .or(`sender_id.eq.${founderId},receiver_id.eq.${founderId}`)
        .order('created_at', { ascending: false })
        .limit(50);

      if (error) throw error;

      const chats = data.reduce((acc, message) => {
        const otherId = message.sender_id === founderId ? message.receiver_id : message.sender_id;
        if (!acc[otherId]) {
          acc[otherId] = {
            id: otherId,
            name: message.founders.name,
            lastMessage: message.content,
            lastMessageTime: message.created_at
          };
        }
        return acc;
      }, {});

      setRecentChats(Object.values(chats));
    } catch (error) {
      console.error('Error fetching recent chats:', error);
    }
  };

  const handleSend = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;
    const userMessage = { text: input, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsAiThinking(true);
    try {
      const context = {
        currentFounder,
        allFounders: founders,
        previousMessages: messages
      };
      const aiResponse = await getGeminiResponse(input, context);
      
      setMessages(prev => [...prev, { text: aiResponse.message, sender: 'ai' }]);
      
      if (aiResponse.founders && aiResponse.founders.length > 0) {
        setDisplayFounders(aiResponse.founders);
      } else {
        setDisplayFounders([]);
      }
    } catch (error) {
      console.error('Error processing message:', error);
      setMessages(prev => [...prev, { text: "I'm sorry, I encountered an error processing your request.", sender: 'ai' }]);
    } finally {
      setIsAiThinking(false);
    }
  };

  const handleLogout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
      setError('Failed to log out');
    }
  };

  if (isLoading) return (
    <div className="flex justify-center items-center h-screen bg-gray-50">
      <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );

  if (error) return (
    <div className="flex justify-center items-center h-screen bg-gray-50">
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
        <p className="font-bold">Error</p>
        <p>{error}</p>
      </div>
    </div>
  );

  const suggestions = [
    "Recommend founders for networking",
    "Give me tips for pitching to investors",
    "Ideas to improve my startup's growth",
    "Show me all founders in my area"
  ];

  return (
    <div className="bg-gray-50 min-h-screen flex flex-col h-screen w-screen">
      <nav className="bg-white shadow-md p-4">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <h1 className="text-2xl font-bold text-blue-600">FounderAI</h1>
            <button className="bg-blue-100 text-blue-600 px-4 py-2 rounded- text-sm font-medium hover:bg-blue-200 transition duration-300">
              Try FounderAI Advanced
            </button>
          </div>
          <button onClick={handleLogout} className="flex items-center text-gray-600 hover:text-gray-800">
            <LogOut size={18} className="mr-2" />
            Sign Out
          </button>
        </div>
      </nav>

      <main className="flex-grow flex flex-col lg:flex-row max-w-7xl mx-auto w-full p-6 gap-6">
        <div className="lg:w-3/4 space-y-6">
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-3xl font-bold mb-2">
              <span className="text-blue-600">Hello,</span> <span className="text-purple-600">{currentFounder?.name}</span>
            </h2>
            <h3 className="text-xl text-gray-600 mb-6">How can I help you today?</h3>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
              {suggestions.map((suggestion, index) => (
                <button
                  key={index}
                  className="bg-gray-100 hover:bg-gray-200 text-gray-800 py-4 px-6 rounded-lg text-left transition duration-300 flex items-center"
                  onClick={() => {
                    setInput(suggestion);
                    inputRef.current.focus();
                  }}
                >
                  <span className="mr-3 text-2xl">ðŸš€</span>
                  <span className="text-sm font-medium">{suggestion}</span>
                </button>
              ))}
            </div>

            <div className="bg-white rounded-lg shadow-inner p-4 h-64 overflow-y-auto mb-4">
              {messages.map((message, index) => (
                <div key={index} className={`mb-4 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}>
                  <span className={`inline-block p-3 rounded-lg ${message.sender === 'user' ? 'bg-blue-100' : 'bg-gray-100'}`}>
                    {message.text}
                  </span>
                </div>
              ))}
              {isAiThinking && (
                <div className="text-left">
                  <span className="inline-block p-3 rounded-lg bg-gray-100">
                    Thinking...
                  </span>
                </div>
              )}
              <div ref={chatEndRef} />
            </div>

            <form onSubmit={handleSend} className="mt-4">
              <div className="relative">
                <input
                  ref={inputRef}
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Enter a prompt here"
                  className="w-full p-4 pr-12 rounded-full bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-800"
                />
                <button 
                  type="submit" 
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-blue-500 text-white rounded-full p-2 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300"
                  disabled={!input.trim()}
                >
                  <Send size={20} />
                </button>
              </div>
            </form>

            {messages.length > 1 && (
              <p className="text-sm text-gray-500 mt-4">
                FounderAI may display inaccurate info, including about people, so double-check its responses.
              </p>
            )}
          </div>

          {displayFounders.length > 0 && (
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-2xl font-bold mb-4">Relevant Founders</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {displayFounders.map((founder) => (
                  <div key={founder.id} className="bg-gray-50 rounded-lg p-4 shadow-sm transition duration-300 hover:shadow-md">
                    <h3 className="font-bold text-lg">{founder.name}</h3>
                    <p className="text-sm mb-2 text-gray-600">{founder.skills}</p>
                    {founder.distance && <p className="text-sm mb-2 text-gray-600">Distance: {founder.distance.toFixed(2)} km</p>}
                    {founder.matchReason && <p className="text-sm mb-2 text-gray-600">{founder.matchReason}</p>}
                    <div className="flex justify-between mt-4">
                      <Link to={`/profile/${founder.id}`} className="text-blue-600 hover:text-blue-800 font-semibold text-sm">
                        View Profile
                      </Link>
                      <Link to={`/chat/${founder.id}`} className="text-green-600 hover:text-green-800 font-semibold text-sm">
                        Start Chat
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        <div className="lg:w-1/4">
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-4 flex items-center">
              <MessageCircle size={24} className="mr-2 text-blue-500" />
              Recent Conversations
            </h2>
            <div className="space-y-4">
              {recentChats.map((chat) => (
                <Link 
                  key={chat.id} 
                  to={`/chat/${chat.id}`}
                  className="block bg-gray-50 rounded-lg p-4 shadow-sm transition duration-300 hover:shadow-md"
                >
                  <div className="flex items-center mb-2">
                    <User size={20} className="mr-2 text-gray-400" />
                    <h3 className="font-bold text-lg">{chat.name}</h3>
                  </div>
                  <p className="text-sm text-gray-600 truncate">{chat.lastMessage}</p>
                  <p className="text-xs text-gray-400 mt-1">
                    {format(new Date(chat.lastMessageTime), 'MMM d, yyyy HH:mm')}
                  </p>
                </Link>
              ))}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;