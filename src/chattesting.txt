import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import { useSupabase } from '../contexts/SupabaseContext';
import { format } from 'date-fns';
import { Send } from 'lucide-react';

const Chat = () => {
  const { founderId } = useParams();
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [senderFounder, setSenderFounder] = useState(null);
  const [receiverFounder, setReceiverFounder] = useState(null);
  const supabase = useSupabase();
  const messagesEndRef = useRef(null);

  const fetchMessages = useCallback(async () => {
    if (!senderFounder || !founderId) return;
    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .from('messages')
        .select('*')
        .or(`and(sender_id.eq.${senderFounder.id},receiver_id.eq.${founderId}),and(sender_id.eq.${founderId},receiver_id.eq.${senderFounder.id})`)
        .order('created_at', { ascending: true });

      if (error) throw error;
      setMessages(data);
    } catch (error) {
      console.error('Error fetching messages:', error);
      setError('Failed to fetch messages');
    } finally {
      setIsLoading(false);
    }
  }, [supabase, founderId, senderFounder]);

  useEffect(() => {
    const fetchSenderFounder = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const { data, error } = await supabase
          .from('founders')
          .select('*')
          .eq('user_id', user.id)
          .single();
        
        if (error) {
          console.error('Error fetching sender founder:', error);
          setError('Failed to load chat');
        } else {
          setSenderFounder(data);
        }
      }
    };

    const fetchReceiverFounder = async () => {
      if (founderId) {
        const { data, error } = await supabase
          .from('founders')
          .select('*')
          .eq('id', founderId)
          .single();
        
        if (error) {
          console.error('Error fetching receiver founder:', error);
          setError('Failed to load receiver information');
        } else {
          setReceiverFounder(data);
        }
      }
    };

    fetchSenderFounder();
    fetchReceiverFounder();
  }, [supabase, founderId]);

  useEffect(() => {
    if (senderFounder) {
      fetchMessages();
    }
  }, [senderFounder, fetchMessages]);

  useEffect(() => {
    const channel = supabase
      .channel('custom-all-channel')
      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'messages' }, (payload) => {
        setMessages((prevMessages) => [...prevMessages, payload.new]);
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [supabase]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const sendMessage = async (e) => {
    e.preventDefault();
    if (!newMessage.trim() || !senderFounder) return;
    setError(null);
    try {
      const { data, error } = await supabase.from('messages').insert([
        {
          sender_id: senderFounder.id,
          receiver_id: founderId,
          content: newMessage.trim(),
        },
      ]);

      if (error) throw error;
      setNewMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
      setError('Failed to send message');
    }
  };

  if (isLoading) return (
    <div className="flex items-center justify-center h-screen w-screen bg-gray-100">
      <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );

  if (error) return (
    <div className="flex items-center justify-center h-screen w-screen bg-gray-100">
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong className="font-bold">Error:</strong>
        <span className="block sm:inline"> {error}</span>
      </div>
    </div>
  );

  return (
    <div className="flex flex-col h-screen w-screen bg-gray-100">
      <header className="bg-white shadow-md p-4 flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-800">
          Chat with {receiverFounder?.name || 'AI Assistant'}
        </h1>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 rounded-full bg-green-500"></div>
          <span className="text-sm text-gray-600">Online</span>
        </div>
      </header>
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.sender_id === founderId ? 'justify-start' : 'justify-end'}`}>
            <div className={`max-w-xs lg:max-w-md xl:max-w-lg rounded-lg p-3 shadow-md ${
              message.sender_id === founderId 
                ? 'bg-white text-gray-800' 
                : 'bg-blue-500 text-white'
            }`}>
              <p className="text-sm">{message.content}</p>
              <div className="flex justify-between items-center mt-2">
                <p className="text-xs opacity-75">
                  {message.sender_id === senderFounder?.id ? 'You' : receiverFounder?.name}
                </p>
                <p className="text-xs opacity-75">
                  {format(new Date(message.created_at), 'HH:mm')}
                </p>
              </div>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <form onSubmit={sendMessage} className="bg-white p-4 border-t border-gray-200">
        <div className="flex items-center space-x-4">
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            className="flex-1 bg-gray-100 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Type your message..."
          />
          <button 
            type="submit" 
            className="bg-blue-500 text-white rounded-full p-3 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300 ease-in-out"
          >
            <Send size={20} />
          </button>
        </div>
      </form>
    </div>
  );
};

export default Chat;